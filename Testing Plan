Testing Plan
============


BigTreeCMS
----------

__construct
- Test to ensure ExtensionRequiredFiles, ModuleClassList and RouteRegistry populate

__destruct
- Update a setting

autoSaveSetting
- Create a setting
- Extension context works properly

cacheDelete
- Delete a cache entry with just an identifier
- Delete a cache entry with an identifier and key

cacheGet
- Get an entry by identifier and key
- Get an entry with a max age that is successful
- Get an entry with a max age that is not successful
- Get an entry that is not decoded

cachePut
- Create a new entry
- Create a new entry with an existing ID (and test failure)
- Update an existing entry (verify timestamp updates)

checkOldRoutes
- Check bigtree_route_history for an old route
- Pass in an old route, expect redirect
- Check for old route + additional parameters
- Pass in an old route, expect redirect + parameters

drawXMLSitemap
- Test for basic content template
- Test for internal link (placed in external link field)
- Test for routed template that has drawSitemap method

extensionSettingCheck
- Call on a setting when outside of EXTENSION_ROOT definition and see if it properly returns the same setting ID
- Again inside the definition when an appropraitely named extension*id setting exists (returns new id)
- Again when it doesn't exist (returns same id)

getBreadcrumb and getBreadcrumbByPage
- Call in context of a page 3 levels deep.
- Make sure it returns the proper 3 levels
- Call again ignoring trunk on a page where a trunk exists along the line and ensure we get all crumbs

getFeed and getFeedByRoute
- Test for route
- Test for ID
- Test for feed without options (no errors / warnings thrown)
- Test for feed array

getHiddenNavByParent
- Call parent, ensure only hidden nav is returned

getInternalPageLink
- Test on ipl:// address
- Test on {wwwroot} address
- Test on {staticroot} address
- Test on {adminroot} address
- Test on regular address
- Test on external address
- Test ipl:// address with additional parameters

getNavByParent
- Call on page that has module nav
- Call on page that doesn't have module nav
- Call on page where child pages have module nav and ask for two levels

getNavId
- Check a pending page URL
- Check a preview URL for a published page with changes
- Check a live URL
- Check a live routed URL for success of $commands
- Check a live basic URL for failure of $commands

getPage
- Check for page returning correctly with decoded resources
- Check again for non-decoding when asked

getPendingPage
- Check for a returned page with pending changes applied
- Check again for a pending page
- Check again for a page with no pending changes
- Check for pending page with no decoding
- Check page w/ changes and no decoding
- Check page w/ tags pending

getPreviewLink
- Check for proper link for homepage
- Check for proper link for published page
- Check for proper link for pending page

getRelatedPagesByTags
- Check for related pages by a single tag
- Check for related pages by multiple tags (with relevance checks)
- Check for only page IDs returned

getSetting
- Check for retrieving extension setting in extension context (partial and full ID)
- Check for retrieving regular setting in extension context
- Check for retrieving extension setting in regular context (full ID)
- Check for retrieving regular setting in regular context
- Check for retrieving encrypted setting
- Check for translating IPL string
- Check for translating IPL inside array

getSettings
- Get multiple settings
- Get a single setting
- Get a mix of extension and regular settings
- Get some encrypted settings
- Get settings in extension context

getTag
- Get a tag by ID

getTagByRoute
- Get a tag by route

getTagsForPage
- Get tags for a page

getTemplate
- Get a template and check that its resources decoded

getTopLevelNavigationIdForPage
- Test on a page where there's a trunk higher than it and we want the trunk
- Test on a page where there's a trunk higher and we don't
- Test on a page where there's no trunk

handle404
- Handle one we know exists and check for incremented value
- Handle one we know doesn't and check for entry

makeSecure
- Test on a non-https page, see if it redirects
- Test on an https page, ensure src and href gets rewritten

replaceHardRoots
- Make sure that ADMIN_ROOT, WWW_ROOT, and STATIC_ROOT get replaced

replaceInternalPageLinks
- Make sure ADMIN_ROOT, WWW_ROOT, STATIC_ROOT, and IPLs get converted

replaceRelativeRoots
- Make sure ADMIN_ROOT, WWW_ROOT, STATIC_ROOT are converted

urlify
- Make sure nothing but A-Z and 0-9 make it into a URL and we don't have double dash

BigTreeAdmin
------------

__construct
- Test to verify extension plugins loaded
- Test to verify login permissions setup via cookie
- Test to verify login permissions setup via session
- Invalidate session with bad chain
- Check a user without page permissions for $this->HidePages
- Verify BigTreeAdmin::$ReservedTLRoutes contains the route of the admin
- Verify that setting bigtree-interal-per-page will update BigTreeAdmin::$PerPage

allocateResources
- File BigTreeAdmin::$IRLsCreated with IRLs, test that existing ones are wiped and new created

archivePage
- Verify that the page was archived on a user that has access and true was returned
- Verify that page was not archived and false was returned on a user without access to page AND on a user with access to page but not children

archivePageChildren
- Verify that existing archived pages don't receive archived-inherited status
- Verify that all children / grandchildren are archived

canModifyChildren
- Check for a true when permissions of children are all "i" or "p"
- Check for a false when any child has an "n" or "e"

changePassword
- Check for success on good hash
- Check for fail on bad hash

checkAccess
- Check for fail on developer-only for non-developer
- Check for success on admin
- Check for fail on action level > user level
- Check for success on regular user w/ module access
- Check for success on regular user with module based permissions to a certain group
- Check for fail when above conditions all fail

checkHTML
- Check for failure of image (in irl and regular context)
- Check for failure of link (in regular, ipl, wwwroot contexts)

clearCache
- Check that cache directory is emptied

clearDead404s
- Verify that 404s without redirects have been deleted
- Verify that 404s with redirects still exist

create301
- Verify that creating a new redirect works
- Verify that links are IPL encoded
- Verify that updating an existing redirect works

createCallout
- Verify that callout is created
- Verify false if a bad ID is presented
- Verify false if an existing ID is presented
- Verify creation of file when it doesn't exist

createCalloutGroup
- Verify creation of group
- Verify alphabetical sort of callouts

createFieldType
- Verify that field type is created
- Verify false if a bad ID is presented
- Verify false if an existing ID is presented
- Verify creation of files when non-existant

createMessage
- Verify that tags are stripped from title
- Verify that only a few tags remain in body (no <script> <link>)
- Verify creation of message